const connection = require('../database'); // Import database connection

// Confirm Order logic
exports.order = (req, res) => {
    console.log('Order confirmation request received'); // Debug log
    const { customerId, paymentMethod } = req.body; // Get customerId and paymentMethod from request body

    console.log(`Received customerId: ${customerId}, paymentMethod: ${paymentMethod}`); // Debug log

    if (!customerId || !paymentMethod) {
        console.log('Missing customerId or paymentMethod'); // Debug log
        return res.status(400).json({ message: 'Customer ID and Payment Method are required.' });
    }

    // Call the ConfirmOrder stored procedure
    connection.query(
        'CALL ConfirmOrder(?, ?, @SalesID,@ErrorMsg);', 
        [customerId, paymentMethod], 
        (err, results) => {
            if (err) {
                console.error('Database error:', err); // Debug log
                return res.status(500).json({ message: 'Internal server error' });
            }

            // Retrieve the SalesID generated by the stored procedure
            connection.query('SELECT @SalesID AS SalesID, @ErrorMsg AS ErrorMsg;', (err, result) => {
                if (err) {
                    console.error('Error fetching SalesID:', err); // Debug log
                    return res.status(500).json({ message: 'Error fetching SalesID' });
                }
            
                const salesId = result[0].SalesID;
                const errorMessage = result[0].ErrorMsg;
            
                if (salesId === null) {
                    console.error('Order could not be confirmed:', errorMessage); // Log error message
                    return res.status(200).json({ message: errorMessage }); // Send error message as response
                }
            
                console.log('Order confirmed, SalesID:', salesId); // Debug log
                res.status(200).json({ message: 'Order confirmed', salesId }); // Send success message with SalesID
            });
            
        }
    );
};
